type ApiError = record {
  code : nat16;
  message : text;
};

type ApiStringResult = variant {
  Ok : text;
  Err : ApiError;
};

type ApiNatResult = variant {
  Ok : nat64;
  Err : ApiError;
};

type ApiFloatResult = variant {
  Ok : float64;
  Err : ApiError;
};

type ApiEmptyResult = variant {
  Ok;
  Err : ApiError;
};

type TimestampNs = nat64;

type UserId = principal;

type UserRole = variant {
  Admin;
  Deployer;
};

type User = record {
  role : UserRole;
  created_at : TimestampNs;
  payments : vec nat64;
};

type GetUserResult = variant {
  Ok : User;
  Err : ApiError;
};

type CreateUserResult = variant {
  Ok : UserId;
  Err : ApiError;
};

type DeploymentId = text;

type DeploymentState = variant {
  Initialized;
  DeploymentCreated : record {
    tx_hash : text;
    dseq : nat64;
    manifest_sorted_json : text;
  };
  LeaseCreated : record {
    tx_hash : text;
    provider_url : text;
  };
  Active;
  Closed;
  FailedOnClient : record {
    reason : text;
  };
  FailedOnCanister : record {
    reason : text;
  };
};

type Deployment = record {
  sdl : text;
  user_id : UserId;
  state_history : vec record { TimestampNs; DeploymentState };
  icp_price : float64;
};

type GetDeploymentResult = variant {
  Ok : record {
    id : DeploymentId;
    deployment : Deployment;
  };
  Err : ApiError;
};

type GetDeploymentsResult = variant {
  Ok : vec record {
    id : DeploymentId;
    deployment : Deployment;
  };
  Err : ApiError;
};

type CreateDeploymentResult = variant {
  Ok : DeploymentId;
  Err : ApiError;
};

type DeploymentParams = record {
  name : opt text;
  image : opt text;
  env_vars : opt vec record { text; text };
  ports : vec record { nat32; opt nat32; text };
  cpu : CpuSize;
  memory : MemoryStorageSize;
  storage : MemoryStorageSize;
  volume_mount : opt text;
  command : opt vec text;
};

type CpuSize = variant {
  Small;
  Medium;
  Large;
};

type MemoryStorageSize = variant {
  Small;
  Medium;
  Large;
};

//// IC WebSocket types ////
import "./ws_types.did";

type DeploymentUpdateWsMessage = record {
  id : text;
  update : DeploymentState;
};
//// End IC WebSocket types ////

//// Ledger types ////
import "./ledger_types.did";

type QueryBlocksResult = variant {
  Ok : QueryBlocksResponse;
  Err : ApiError;
};
//// End Ledger types ////

service : (bool) -> {
  "address" : () -> (ApiStringResult);
  "balance" : () -> (ApiNatResult);
  "check_tx" : (text) -> (ApiEmptyResult);
  "get_user" : () -> (GetUserResult) query;
  "create_user" : () -> (CreateUserResult);
  "promote_user_to_admin" : (UserId) -> (ApiEmptyResult);
  "get_deployment" : (text) -> (GetDeploymentResult) query;
  "get_deployments" : () -> (GetDeploymentsResult) query;
  "create_certificate" : (text, text) -> (ApiStringResult);
  "create_deployment" : (DeploymentParams) -> (CreateDeploymentResult);
  "deposit_deployment" : (text, nat64) -> (ApiEmptyResult);
  "update_test_deployment_sdl" : (text) -> (ApiEmptyResult);
  "create_test_deployment" : () -> (CreateDeploymentResult);
  "update_deployment_state" : (text, DeploymentState) -> (ApiEmptyResult);
  "close_deployment" : (text) -> (ApiEmptyResult);
  "update_akt_balance" : (nat64) -> (ApiFloatResult);
  "get_deployment_icp_price" : () -> (ApiFloatResult);

  //// IC WebSocket methods ////
  "ws_open" : (CanisterWsOpenArguments) -> (CanisterWsOpenResult);
  "ws_close" : (CanisterWsCloseArguments) -> (CanisterWsCloseResult);
  "ws_message" : (CanisterWsMessageArguments, opt DeploymentUpdateWsMessage) -> (CanisterWsMessageResult);
  "ws_get_messages" : (CanisterWsGetMessagesArguments) -> (CanisterWsGetMessagesResult) query;
  //// End IC WebSocket methods ////

  //// Ledger methods ////
  "query_blocks" : (GetBlocksArgs) -> (QueryBlocksResult) composite_query;
  "get_icp_price" : () -> (ApiFloatResult);
  "get_akt_price" : () -> (ApiFloatResult);
  //// End Ledger methods ////
};
