type ApiError = record {
    code : nat16;
    message : text;
};

type ApiStringResult = variant {
    Ok : text;
    Err : ApiError;
};

type ApiEmptyResult = variant {
    Ok;
    Err : ApiError;
};

type TimestampNs = nat64;

type UserId = principal;

type UserRole = variant {
    Admin;
    Deployer;
};

type User = record {
    role : UserRole;
    created_at : TimestampNs;
};

type GetUserResult = variant {
    Ok : User;
    Err : ApiError;
};

type CreateUserResult = variant {
    Ok : UserId;
    Err : ApiError;
};

type DeploymentId = text;

type DeploymentUpdate = variant {
    Initialized : text;
    DeploymentCreated : record { text; nat64 };
    LeaseCreated : record { text; text };
    Active;
    Closed;
    Failed : text;
};

type Deployment = record {
    sdl : text;
    user_id : UserId;
    state_history : vec record { TimestampNs; DeploymentUpdate };
};

type GetDeploymentResult = variant {
    Ok : record {
        id : DeploymentId;
        deployment : Deployment;
    };
    Err : ApiError;
};

type GetDeploymentsResult = variant {
    Ok : vec record {
        id : DeploymentId;
        deployment : Deployment;
    };
    Err : ApiError;
};

type CreateDeploymentResult = variant {
    Ok : DeploymentId;
    Err : ApiError;
};

//// IC WebSocket types ////
import "./ws_types.did";

type DeploymentUpdateWsMessage = record {
    id : text;
    update : DeploymentUpdate;
};
//// End IC WebSocket types ////

service : (bool) -> {
    "address" : () -> (ApiStringResult);
    "balance" : () -> (ApiStringResult);
    "get_user" : () -> (GetUserResult) query;
    "create_user" : () -> (CreateUserResult);
    "promote_user_to_admin" : (UserId) -> (ApiEmptyResult);
    "get_deployment" : (text) -> (GetDeploymentResult) query;
    "get_deployments" : () -> (GetDeploymentsResult) query;
    "create_deployment" : (text) -> (CreateDeploymentResult);
    "create_test_deployment" : () -> (CreateDeploymentResult);
    "close_deployment" : (text) -> (ApiEmptyResult);

    //// IC WebSocket methods ////
    "ws_open" : (CanisterWsOpenArguments) -> (CanisterWsOpenResult);
    "ws_close" : (CanisterWsCloseArguments) -> (CanisterWsCloseResult);
    "ws_message" : (CanisterWsMessageArguments, opt DeploymentUpdateWsMessage) -> (CanisterWsMessageResult);
    "ws_get_messages" : (CanisterWsGetMessagesArguments) -> (CanisterWsGetMessagesResult) query;
    //// End IC WebSocket methods ////
};
