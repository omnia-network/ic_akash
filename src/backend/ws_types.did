type ClientPrincipal = principal;

type ClientKey = record {
    client_principal : ClientPrincipal;
    client_nonce : nat64;
};

type CanisterOutputMessage = record {
    client_key : ClientKey;
    key : text;
    content : blob;
};

type CanisterOutputCertifiedMessages = record {
    messages : vec CanisterOutputMessage;
    cert : blob;
    tree : blob;
};

type CanisterWsOpenArguments = record {
    client_nonce : nat64;
};

type CanisterWsOpenResult = variant {
    Ok : null;
    Err : text;
};

type CanisterWsCloseArguments = record {
    client_key : ClientKey;
};

type CanisterWsCloseResult = variant {
    Ok : null;
    Err : text;
};

type CanisterWsGetMessagesArguments = record {
    nonce : nat64;
};

type CanisterWsGetMessagesResult = variant {
    Ok : CanisterOutputCertifiedMessages;
    Err : text;
};
